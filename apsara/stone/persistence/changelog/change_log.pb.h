// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: change_log.proto

#ifndef PROTOBUF_change_5flog_2eproto__INCLUDED
#define PROTOBUF_change_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace apsara {
namespace stone {
namespace changelog {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_change_5flog_2eproto();
void protobuf_AssignDesc_change_5flog_2eproto();
void protobuf_ShutdownFile_change_5flog_2eproto();

class Record;

// ===================================================================

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();
  
  Record(const Record& from);
  
  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();
  
  void Swap(Record* other);
  
  // implements Message ----------------------------------------------
  
  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 seq_id = 1;
  inline bool has_seq_id() const;
  inline void clear_seq_id();
  static const int kSeqIdFieldNumber = 1;
  inline ::google::protobuf::int64 seq_id() const;
  inline void set_seq_id(::google::protobuf::int64 value);
  
  // required bytes record = 2;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 2;
  inline const ::std::string& record() const;
  inline void set_record(const ::std::string& value);
  inline void set_record(const char* value);
  inline void set_record(const void* value, size_t size);
  inline ::std::string* mutable_record();
  inline ::std::string* release_record();
  
  // @@protoc_insertion_point(class_scope:apsara.stone.changelog.Record)
 private:
  inline void set_has_seq_id();
  inline void clear_has_seq_id();
  inline void set_has_record();
  inline void clear_has_record();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 seq_id_;
  ::std::string* record_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_change_5flog_2eproto();
  friend void protobuf_AssignDesc_change_5flog_2eproto();
  friend void protobuf_ShutdownFile_change_5flog_2eproto();
  
  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// ===================================================================


// ===================================================================

// Record

// optional int64 seq_id = 1;
inline bool Record::has_seq_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_seq_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_seq_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_seq_id() {
  seq_id_ = GOOGLE_LONGLONG(0);
  clear_has_seq_id();
}
inline ::google::protobuf::int64 Record::seq_id() const {
  return seq_id_;
}
inline void Record::set_seq_id(::google::protobuf::int64 value) {
  set_has_seq_id();
  seq_id_ = value;
}

// required bytes record = 2;
inline bool Record::has_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_record() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    record_->clear();
  }
  clear_has_record();
}
inline const ::std::string& Record::record() const {
  return *record_;
}
inline void Record::set_record(const ::std::string& value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void Record::set_record(const char* value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void Record::set_record(const void* value, size_t size) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_record() {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  return record_;
}
inline ::std::string* Record::release_record() {
  clear_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = record_;
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace changelog
}  // namespace stone
}  // namespace apsara

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_change_5flog_2eproto__INCLUDED
